version: 2.1

parameters:
  terraform-image:
    type: string
    default: "hashicorp/terraform:0.12.29"
  gcloud-image:
    type: string
    default: "google/cloud-sdk:306.0.0-alpine"
  ruby-image:
    type: string
    default: "circleci/ruby:2.5.1"
  python-image:
    type: string
    default: "circleci/python:3.8.0"
  inspec-version:
    type: string
    default: "4.21.3"

commands:
  set_branch:
    steps:
      - run:
          name: Configure for Branch
          command: bash ./scripts/branch.sh
  gcp_key:
    steps:
      - run:
          name: "Add GCP Key"
          command: source ~/.env && echo $GOOGLE_CREDENTIALS > /tmp/gcp.json
  gcr_push:
    parameters:
      context:
        type: string
      image:
        type: string
    steps:
      - run:
          name: Push To GCR
          command: bash ./scripts/push.sh << parameters.context >> << parameters.image >>

  add_bash:
    steps:
      - run:
          name: Install Bash
          command: apk add bash
  gcp_apply:
    parameters:
      dir:
        type: string
      args:
        type: string
        default: ""
    steps:
      - add_bash
      - checkout
      - set_branch
      - gcp_key
      - get_services
      - run:
          name: Update Variables
          command: bash ./scripts/variables.sh
      - run:
          name: Apply Infrastructure
          command: bash ./scripts/apply.sh << parameters.dir >> << parameters.args >>
  gcp_configure:
    steps:
      - run:
          name: Set GCP Project
          command: source ~/.env && gcloud config set project $GOOGLE_PROJECT
      - run:
          name: Authenticate GCP Service Account
          command: gcloud auth activate-service-account --key-file=/tmp/gcp.json

  get_services:
    steps:
      - run:
          name: Update Git Submodules
          command: git submodule update --init --recursive
  deploy_component:
    parameters:
      component_type:
        type: string
      component_name:
        type: string
    steps:
      - checkout
      - set_branch
      - gcp_key
      - get_services
      - gcp_configure
      - setup_remote_docker
      - run:
          name: Check Deployment Version
          command: bash ./scripts/check.sh << parameters.component_type >> << parameters.component_name >>
      - run:
          name: Install Components
          command: gcloud components install skaffold kubectl -q
      - run:
          name: Run Deployment
          command: bash ./scripts/deploy.sh << parameters.component_type >> << parameters.component_name >>
      - run:
          name: Add Deployment Version
          command: bash ./scripts/add.sh << parameters.component_type >> << parameters.component_name >>

  test_component:
    parameters:
      component_type:
        type: string
      component_name:
        type: string
    steps:
      - checkout
      - set_branch
      - get_services
      - run:
          name: Upgrade Pip
          command: pip install --user --upgrade pip
      - run:
          name: Upgrade Pip
          command: pip3 install --user -r requirements.txt
      - run:
          name: Run Behave Tests
          command: |
            source ~/.env
            cd ./dev/<< parameters.component_type >>/<< parameters.component_name >>/features
            behave -f pretty *.feature

jobs:
  enable_services:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/services

  push_jobs:
    docker:
      - image: << pipeline.parameters.gcloud-image >>
    steps:
      - checkout
      - set_branch
      - gcp_key
      - gcp_configure
      - setup_remote_docker
      - gcr_push:
          image: destroy
          context: ./ops/cloud/jobs/destroy

  apply_network:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/network

  apply_db:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/instance

  schedule_jobs:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/jobs

  apply_cluster:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/cluster

  link_customers:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    steps:
      - gcp_apply:
          dir: ./ops/cloud/database
          args: "'-var service_name=customers'"

  deploy_customers:
    docker:
      - image: << pipeline.parameters.gcloud-image >>
    steps:
      - deploy_component:
          component_type: "services"
          component_name: "customers"

  apply_ingress:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    steps:
      - gcp_apply:
          dir: ./ops/cloud/ingress

  test_infrastructure:
    docker:
      - image: << pipeline.parameters.ruby-image >>
    steps:
      - checkout
      - set_branch
      - gcp_key
      - run:
          name: Install InSpec
          command: gem install inspec-bin -v << pipeline.parameters.inspec-version >>
      - run:
          name: Run InSpec
          command: |
            source ~/.env
            cd ./ops/tests
            inspec exec . -t gcp:// \
                      --chef-license=accept-no-persist --no-color \
                      --input gcp_project_id=$GOOGLE_PROJECT \
                              gcp_region=$GOOGLE_REGION \
                              gcp_zone=$GOOGLE_ZONE

  test_customers:
    docker:
      - image: << pipeline.parameters.python-image >>
    steps:
      - test_component:
          component_type: "services"
          component_name: "customers"

workflows:
  version: 2
  up:
    jobs:
      - enable_services
      - push_jobs:
          requires:
            - enable_services
      - schedule_jobs:
          requires:
            - push_jobs
      - apply_network:
          requires:
            - enable_services
      - apply_db:
          requires:
            - apply_network
      - apply_cluster:
          requires:
            - apply_network
      - link_customers:
          requires:
            - apply_db
            - apply_cluster
      - deploy_customers:
          requires:
            - link_customers
      - apply_ingress:
          requires:
            - deploy_customers
      - test_infrastructure:
          requires:
            - apply_ingress
      - test_customers:
          requires:
            - apply_ingress
