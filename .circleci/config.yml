version: 2.1

parameters:
  terraform-image:
    type: string
    default: "hashicorp/terraform:0.12.29"
  gcloud-image:
    type: string
    default: "google/cloud-sdk:302.0.0-alpine"
  ruby-image:
    type: string
    default: "circleci/ruby:2.5.1"
  python-image:
    type: string
    default: "circleci/python:3.8.0"
  inspec-version:
    type: string
    default: "4.21.3"

commands:
  set_branch:
    steps:
      - run:
          name: Configure for Branch
          command: bash ./.circleci/branch.sh
  gcp_key:
    steps:
      - run:
          name: "Add GCP Key"
          command: source ~/.env && echo $GOOGLE_CREDENTIALS > /tmp/gcp.json
  add_bash:
    steps:
      - run:
          name: Install Bash
          command: apk add bash
  gcp_apply:
    parameters:
      dir:
        type: string
    steps:
      - add_bash
      - checkout
      - set_branch
      - gcp_key
      - get_services # Get services for linking
      - run:
          name: Apply Infrastructure
          command: |
            source ~/.env
            cd << parameters.dir >>
            terraform init -backend-config="bucket=${GOOGLE_PROJECT}-tf"
            terraform plan -var-file="${TF_VARS}/${DELINEATEIO_ENV}.tfvars" \
                              -lock=true -refresh=true -out="${TF_VARS}/plan.out"
            terraform apply -lock=true -refresh=true -auto-approve "${TF_VARS}/plan.out"
  get_services:
    steps:
      - run:
          name: Update Git Submodules
          command: git submodule update --init --recursive
  deploy_component:
    parameters:
      component_type:
        type: string
      component_name:
        type: string
    steps:
      - checkout
      - set_branch
      - gcp_key
      - get_services
      - run:
          name: Set GCP Project
          command: source ~/.env && gcloud config set project $GOOGLE_PROJECT
      - run:
          name: Authenticate GCP Service Account
          command: gcloud auth activate-service-account --key-file=/tmp/gcp.json
      - run:
          name: Compare Last Deployment
          command: source ~/.env && bash ./.circleci/deploy_check.sh << parameters.component_type >> << parameters.component_name >>
      - setup_remote_docker
      - run:
          name: Install GCP Components
          command: gcloud components install kubectl skaffold --quiet
      - run:
          name: Install Container Structure Test
          command: |
            curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
            chmod +x container-structure-test-linux-amd64
            mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
      - run:
          name: Add GKE Config
          command: source ~/.env && gcloud container clusters get-credentials app-cluster -z $GOOGLE_ZONE
      - run:
          name: Deploy to GKE
          command: |
            source ~/.env
            cd ./dev/<< parameters.component_type >>/<< parameters.component_name >>
            skaffold run -p "pub" -d "$GOOGLE_REGISTRY/$GOOGLE_PROJECT"
      - run:
          name: Add New Deployment
          command: source ~/.env && bash ./.circleci/deploy_add.sh << parameters.component_type >> << parameters.component_name >>
  test_component:
    parameters:
      component_type:
        type: string
      component_name:
        type: string
    steps:
      - checkout
      - set_branch
      - get_services
      - run:
          name: Upgrade Pip
          command: pip install --user --upgrade pip
      - run:
          name: Upgrade Pip
          command: pip3 install --user -r requirements.txt
      - run:
          name: Run Behave Tests
          command: |
            source ~/.env
            cd ./dev/<< parameters.component_type >>/<< parameters.component_name >>/features
            behave -f pretty *.feature

  gcp_destroy:
    parameters:
      dir:
        type: string
    steps:
      - run:
          name: Destroy
          command: |
            source ~/.env
            cd << parameters.dir >>
            terraform init -backend-config="bucket=${GOOGLE_PROJECT}-tf"
            terraform destroy -var-file="../env/${DELINEATEIO_ENV}.tfvars" -auto-approve

jobs:
  enable_services:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/services

  apply_network:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/network

  apply_db:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/db

  apply_cluster:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    environment:
      BASH_ENV: "~/.bash_profile"
    steps:
      - gcp_apply:
          dir: ./ops/cloud/cluster

  link_customers:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    steps:
      - gcp_apply:
          dir: ./dev/services/customers/tf

  deploy_customers:
    docker:
      - image: << pipeline.parameters.gcloud-image >>
    steps:
      - deploy_component:
          component_type: "services"
          component_name: "customers"

  apply_ingress:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    steps:
      - gcp_apply:
          dir: ./ops/cloud/ingress

  test_infrastructure:
    docker:
      - image: << pipeline.parameters.ruby-image >>
    steps:
      - checkout
      - set_branch
      - gcp_key
      - run:
          name: Install InSpec
          command: gem install inspec-bin -v << pipeline.parameters.inspec-version >>
      - run:
          name: Run InSpec
          command: |
            source ~/.env
            cd ./ops/tests
            inspec exec . -t gcp:// \
                      --chef-license=accept-no-persist --no-color \
                      --input gcp_project_id=$GOOGLE_PROJECT \
                              gcp_region=$GOOGLE_REGION \
                              gcp_zone=$GOOGLE_ZONE

  test_customers:
    docker:
      - image: << pipeline.parameters.python-image >>
    steps:
      - test_component:
          component_type: "services"
          component_name: "customers"

  destroy:
    docker:
      - image: << pipeline.parameters.terraform-image >>
    steps:
      - add_bash
      - checkout
      - set_branch
      - gcp_destroy:
          dir: ./ops/cloud/ingress
      - gcp_destroy:
          dir: ./ops/cloud/cluster

workflows:
  version: 2
  up:
    jobs:
      - enable_services
      - apply_network:
          requires:
            - enable_services
      - apply_db:
          requires:
            - apply_network
      - apply_cluster:
          requires:
            - apply_network
      - link_customers:
          requires:
            - apply_db
            - apply_cluster
      - deploy_customers:
          requires:
            - link_customers
      - apply_ingress:
          requires:
            - deploy_customers
      - test_infrastructure:
          requires:
            - apply_ingress
      - test_customers:
          requires:
            - apply_ingress
